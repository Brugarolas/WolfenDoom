int messagestart; // Used to track layer of hud messages that we should be OK to start on

// Calculate time (in tics, 1/35 of a second) to display the message on-screen,
// hopefully giving players enough time to read it, whilst not displaying it
// for too long. "message" is the identifier of a LANGUAGE entry.
function int GetMessageTime(int message)
{
	int extraTime = 70; // 2 extra seconds
	int perWordTime = 6; // Tics per word
	int longWordPerCharTics = 2; // Tics to add per char in a long word
	str string = StrParam(l: message);
	int length = StrLen(string);
	int spaces = 0; // Number of spaces. Add 1 to get word count, multiply by perWordTime and add longWordTime and extraTime to get estimated reading time.
	int longWordTime = 0; // Extra time to add for long words (7 or more letters)
	int consecutiveChars = 0; // Consecutive letters
	for (int i = 0; i < length; i++)
	{
		int strchar = GetChar(string, i);
		// Found a space. 
		if (strchar == ' ')
		{
			spaces += 1;
			if (consecutiveChars >= 7)
			{
				longWordTime += longWordPerCharTics * consecutiveChars;
			}
			consecutiveChars = 0;
		}
		else
		{
			consecutiveChars += 1;
		}
	}
	int totalTime = (spaces + 1) * perWordTime + longWordTime + extraTime;
	return totalTime;
}

script "BoADialogue"(int headtalky, int headsilent, int message)
{
	ScriptCall("Message", "Init", StrLeft(headtalky, 7), message);
}

int devcommentqueue = 0;

script "BoADevComment" (int langEntry)
{
	int queuelength = devcommentqueue; // Script-local copy of devcommentqueue
	int image = 0;
	// Print(s:"queuelength ", d:queuelength);
	if (GetCvar("boa_devcomswitch")) {
		// Get image to show on the comment, if any. The pipe character is used
		// to separate the entry ID from the image name.
		int index = 0;
		int length = StrLen(langEntry);
		while (index < length)
		{
			int char = GetChar(langEntry, index);
			if (char == '|')
			{
				image = StrMid(langEntry, index + 1, length - index - 1);
				langEntry = StrLeft(langEntry, index);
				break;
			}
			index++;
		}
		// Get time to show message on screen
		int basemessagetime = GetMessageTime(langEntry);
		// 20 tics is a little more than half a second. Add this to
		// devcommentqueue twice to give messages time to fade in and out.
		devcommentqueue += basemessagetime + 20 * 2;
		// Wait for previous dev comment to disappear
		if (queuelength)
		{
			delay(queuelength);
		}
		// Show new dev comment
		ACS_NamedExecuteAlways("_Do_BoADevComment_", 0, langEntry, basemessagetime, image);
		// Use ACS_NamedExecute here so that only one instance of this script
		// can run at any given time.
		ACS_NamedExecute("_Tick_BoADevComment_", 0);
	}
}

script "_Tick_BoADevComment_" (void)
{
	// Tick down timer for developer comment queue
	while (devcommentqueue)
	{
		devcommentqueue -= 1;
		delay(1);
	}
}

script "_Do_BoADevComment_" (int langEntry, int basemessagetime, int image)
{
	// Position
	int devcx = 50.1;
	int devcy = 400.1;

	// Offsets for image and text
	int imageyoffset = 23.0;
	int textxoffset = 0; // Offset text to the right to make space for image
	int textxoffsetf = 0; // Same, but in fixed point

	if (image > 0)
	{ // Image is assumed to be a string
		textxoffset = ScriptCall("ACSTools", "GetTextureWidth", image);
		textxoffsetf = textxoffset << 16;
	}

	// Border relative position
	int borderx = devcx - 12.0;
	int bordery = devcy - 12.0;

	// Set up size
	SetHudSize(800, 600, TRUE);

	// Display background
	SetFont("DEVCBACK");
	HudMessage(s:"A"; HUDMSG_FADEINOUT, 2002, CR_UNTRANSLATED, borderx, bordery, ((basemessagetime + 18) * 1872) - (32768), 0.5, 0.5, 1.0);

	// Display image
	if (image > 0)
	{
		SetFont(image);
		// BTW, the ID also works like z-index, but in reverse.
		HudMessage(s:"A"; HUDMSG_FADEINOUT, 2001, CR_UNTRANSLATED, devcx, devcy + imageyoffset, ((basemessagetime + 18) * 1872) - (32768), 0.5, 0.5, 1.0);
	}

	// Display message
	Delay(18);
	SetFont("SMALLFONT");
	SetHudWrapWidth(720 - textxoffset);
	HudMessage(l:langEntry; HUDMSG_TYPEON, 2000, CR_UNTRANSLATED, devcx + textxoffsetf, devcy, 999.0, 0.02, 2.0, 1.0);

	// Wait for 25 seconds and fade out message
	Delay(basemessagetime);
	HudMessage(l:langEntry; HUDMSG_FADEOUT, 2000, CR_UNTRANSLATED, devcx + textxoffsetf, devcy, 0.0, 0.5, 1.0);
}

script "HintMessage" (int message, int key)
{
	ScriptCall("HintMessage", "Init", message, key);
}

script "ShowStats" (void)
{
	ScriptCall("MapStatsHandler", "Toggle");
}

script "KeenPogoMessage" (int message)
{
	ScriptCall("ClassicMessageBox", "PrintMessage", "$KEENPOGO", 2, "KEENPOGO", 0, -1, 26, 6);
}